from pathlib import Path
from collections import defaultdict
import re
from typing import Union


class DatasetUtils:
    """
    Utilities for working with the rach3 dataset.
    """

    def __init__(self, root_path: Path = None):
        """
        Parameters
        ----------
        root_path: root path of dataset. if not specified, defaults to working
                   folder.
        """
        if root_path is None:
            root_path = "./"

        self.root = root_path

    def get_files_by_type(self, filetype: Union[str, list]) -> list[Path]:
        """
        Get all files in dataset based on filetype (mp4, midi, etc)
        Accepts any special symbols glob would accept such as *. Optionally
        specify a list of filetypes for multiple.

        Parameters
        ----------
        filetype: mp4, midi, etc
        -------
        """

        if not isinstance(filetype, list):
            filetype = [filetype]

        files = []
        [files.extend(Path(self.root).rglob('*.'+i)) for i in filetype]
        return files

    @staticmethod
    def compare_session(file_1: Path, file_2: Path) -> bool:
        """
        Determine whether 2 files are from the same recording session. For
        example, files marked v01_p001 and v01_p002 return True. However,
        files marked v01_p001 and v02_p002 would return False.

        Parameters
        ----------
        file_1: Path of first file
        file_2: Path of second file
        -------
        """

        return str(file_1)[:-7] + str(file_1)[-4:] == \
            str(file_2)[:-7] + str(file_2)[-4:]

    def get_sessions(self, filetype: Union[str, list] = None) -> \
            defaultdict[list[Path]]:
        """
        Returns a dictionary with all dates and sessions. Each key is one
        session.

        Can optionally specify what filetype/s you want.
        """

        if filetype is None:
            filetype = "*"

        all_files = self.get_files_by_type(filetype=filetype)
        sessions = self.sort_by_date_and_session(all_files)

        return sessions

    def sort_by_date_and_session(self,
                                 files: list[Path]) -> defaultdict[list[Path]]:
        """
        Take a list of files and return a dictionary of form
        dict[date_session] = fileslist
        """

        sorted_files = defaultdict(list)

        for i in files:
            date = self._get_date(i)
            session_no = self._get_session_no(i)

            if session_no is None or date is None:
                raise AttributeError(f"The path {i} could not be "
                                     f"identified.")
            else:
                sorted_files[date + "_a" + session_no].append(i)

        return sorted_files

    @staticmethod
    def _get_session_no(file: Path) -> Union[str, None]:
        """
        Get the session number from a given file in the format 01, 02, etc.
        """
        for i in file.stem.split("_"):
            if re.search(pattern="(^a|^v)\\d\\d$", string=i):
                return i[-2:]
        return None

    @staticmethod
    def _get_date(file: Path) -> Union[str, None]:
        """
        Get the date from a given file.
        """
        for i in file.stem.split("_"):
            if re.search(pattern="^\\d{4}-\\d{2}-\\d{2}$",
                         string=i):
                return i
        return None

    @staticmethod
    def is_full_audio(file: Path) -> bool:
        """
        Check whether a certain file is the full audio file as generated by
        extract_and_concat_audio.
        """

        return file.stem.split("_")[-1] == "full"

    @staticmethod
    def is_trimmed(file: Path) -> bool:
        """
        Check whether a file is a trimmed audio.
        """

        return file.stem.split("_")[-1] == "trimmed"
    @staticmethod
    def is_warmup(file: Path) -> bool:
        """
        Check if a file is from a warmup.
        """
        return file.stem.split("_")[0] == "warmup"

    @staticmethod
    def is_full_flac(file: Path) -> bool:
        """
        Check whether a file is a full flac recording of a session
        """
        return len(file.stem.split("_")) == 3 and file.suffix == ".flac"

    @staticmethod
    def is_valid_midi(file: Path) -> bool:
        """
        Check if a midi file is valid.
        Parameters
        """
        split_len = len(file.stem.split("_"))
        if split_len != 3:
            return False
        return True
